module Main where

import Brillo
import Brillo.Interface.IO.Game
-- import Board

main :: IO ()
main = 
  do
    let window = mainWindow
    let world = getWorld
    play 
      window
      white
      100
      world
      drawFunc
      handleEvent            
      updateFunc
    -- play 
    --   window
    --   white
    --   100
    --   world
    --   -- (\world -> translate 50 50 world)
    --   id
    --   handleEvent            
    --   (\_ cir -> cir)

    -- animate 
    --   window
    --   white 
    --   (\t -> getWorld t)

    -- simulate
    --   window 
    --   white
    --   100
    --   getWorld
    --   id
    --   (\vp x m -> m)

updateFunc :: Float -> World -> World
updateFunc t (World (Player (x, y) dir (vx, vy)) a b c)   = (World (Player (dx, dy) dir (vx, vy)) a b c)
  -- | dir == UP = (World (Player (x, y + d) dir) a b c) 
  -- | dir == DOWN = (World (Player (x, y - d) dir) a b c) 
  -- | dir == LEFT = (World (Player (x + d, y) dir) a b c) 
  -- | dir == RIGHT = (World (Player (x - d, y) dir) a b c) 
  -- | otherwise = (World (Player (x, y) dir) a b c) 
  where 
    dx = x + vx * t
    dy = y + vy * t

drawFunc :: World -> Picture
drawFunc world = Pictures (getNodePics world)

getNodePics :: World -> [Picture]
getNodePics w = drawPlayer w : genCircles (getPoints w)

drawPlayer :: World -> Picture
drawPlayer (World (Player (x, y) _ _) _ _ _) = Color black (translate a b (Circle 15))
 where
    a = x * 100 - 150
    b = y * 100 - 150

genCircles :: [(Int, Int)] -> [Picture]
genCircles [] = []
genCircles ((x, y):pts) = Color red (translate a b (Circle 20)) : genCircles pts
  where
    a = fromIntegral (x * 100 - 150)
    b = fromIntegral (y * 100 - 150)

getPoints :: World -> [(Int, Int)]
getPoints (World _ _ _ (Grid points)) = points

data Grid = Grid [(Int, Int)]
  deriving (Show)

data World = World {
  player :: Player,
  start :: (Int, Int),
  end :: (Int, Int),
  grid :: Grid
}
  deriving (Show)

data Player = Player {
  playerLocation :: (Float, Float),
  direction :: Direction, 
  velocity :: (Float, Float)
}
  deriving (Show)

data Direction = UP | DOWN | LEFT | RIGHT | NONE
  deriving (Enum, Eq, Show)

getWorld :: World
getWorld = World (Player (0, 0) NONE (0, 0)) (0, 0) (3, 3) (Grid (getGrid 3 3))

getGrid :: Int -> Int -> [(Int, Int)]
getGrid l w = [(x, y) | x <- [0..l], y <- [0..w]]

handleEvent :: Event -> World -> World
handleEvent (EventKey (SpecialKey KeyUp) Down _ _) w = moveUp w
handleEvent (EventKey (SpecialKey KeyDown) Down _ _) w = moveDown w
handleEvent (EventKey (SpecialKey KeyLeft) Down _ _) w = moveLeft w
handleEvent (EventKey (SpecialKey KeyRight) Down _ _) w = moveRight w
handleEvent _ w = w

moveUp :: World -> World
moveUp (World (Player (x, y) _ _) (s1, s2) (e1, e2) (Grid points)) =
  (World (Player (x, y) UP (0.0, 1.0)) (s1, s2) (e1, e2) (Grid points))
  -- | y < e2 = World (x, y + 1) (s1, s2) (e1, e2) (Grid points)
  -- | otherwise = (World (x, y) (s1, s2) (e1, e2) (Grid points))
  
moveDown :: World -> World
moveDown (World (Player (x, y) _ _) (s1, s2) (e1, e2) (Grid points)) =
  (World (Player (x, y) DOWN (0.0, -1.0)) (s1, s2) (e1, e2) (Grid points))
  
moveLeft :: World -> World
moveLeft (World (Player (x, y) _ _) (s1, s2) (e1, e2) (Grid points)) =
  (World (Player (x, y) LEFT (-1.0, 0.0)) (s1, s2) (e1, e2) (Grid points))

moveRight :: World -> World
moveRight (World (Player (x, y) _ _) (s1, s2) (e1, e2) (Grid points)) =
  (World (Player (x, y) RIGHT (1.0, 0.0)) (s1, s2) (e1, e2) (Grid points))

specialKeyPressed :: Event -> Bool
specialKeyPressed (EventKey (Char k) _ _ _) = k == 'g'
specialKeyPressed _ = False

-- main = play (InWindow "GameEvent" (700, 100) (10, 10)) -- DISPLAY
--         white -- background color of window
--         100 -- num simulation steps for each second of real time?
--         "" -- initial world
--         (\str     -> Translate (-340) 0 $ Scale 0.1 0.1 $ Text str) -- world to picture
--         (\event _ -> show event) -- handle the input event
--         (\_ world -> world) -- function to step world one iteration
-- main = display
  -- mainWindow
  -- white
  -- (Color black (Line [(0,0), (10,10)]))

mainWindow :: Display
mainWindow = InWindow "Nice Window" (700, 700) (10,10)



----------------------------------------------------------------------------------

BOARD



module Board where

-- data Grid = [(Zone, Node)]
--     deriving (Eq, Show)
data Direction = UP | DOWN | LEFT | RIGHT | NONE
    deriving (Enum, Eq, Show)
data Point = Point (Float, Float)
    deriving (Eq, Show)
data Node = Wall | Path Center Zone [Direction]
    deriving (Eq, Show)
-- data Node = Wall | Path Center Zone (Neighbors [(Direction, Node)])
--     deriving (Eq, Show)
data Center = Center Point
    deriving (Eq, Show)
data Zone = Zone Float Float Float Float
    deriving (Eq, Show)
data Neighbors = Neighbors [(Direction, Node)]
    deriving (Eq, Show)

getTopRightCors :: [Point]
getTopRightCors = [Point (x, y) | x <- [1..(getLength)], y <- [1..(getHeight)]]

-- give me the top right corners of the inner walls
genLevel :: [Point] -> [Point] -> [(Zone, Node)]
genLevel _ [] = []
genLevel walls (p:pts)
    | isBoundary p walls = ((constructZone p), Wall) : genLevel walls pts-- this is a wall
    | otherwise = ((constructZone p), (constructNode p walls)) : genLevel walls pts-- this is a valid pathway
    -- we need to connect it to the surrounding non nodes

constructZone :: Point -> Zone
constructZone (Point (x, y)) = Zone (x - 1) (x) (y - 1) (y)

constructNode :: Point -> [Point] -> Node
constructNode p walls = Path (getCenter p) (constructZone p) (possibleDirections p walls)

getCenter :: Point -> Center
getCenter (Point (x, y)) = Center (Point (x - 0.5, y - 0.5)) -- very simple for now

possibleDirections :: Point -> [Point] -> [Direction]
possibleDirections p walls  = filter (\d -> d /= NONE) ds
    where 
        ds = (up p walls) : (down p walls) : (left p walls) : (right p walls) : []
    


up :: Point -> [Point] -> Direction
up (Point (x, y)) walls
    | isBoundary upP walls = NONE
    | otherwise = UP
    where 
        upP = Point (x, y + 1)

down :: Point -> [Point] -> Direction
down (Point (x, y)) walls
    | isBoundary downP walls = NONE
    | otherwise = DOWN
    where 
        downP = Point (x, y - 1)

left :: Point -> [Point] -> Direction
left (Point (x, y)) walls
    | isBoundary leftP walls = NONE
    | otherwise = LEFT
    where 
        leftP = Point (x - 1, y)

right :: Point -> [Point] -> Direction
right (Point (x, y)) walls
    | isBoundary rightP walls = NONE
    | otherwise = RIGHT
    where 
        rightP = Point (x + 1, y)


isBoundary :: Point -> [Point] -> Bool
isBoundary (Point (x, y)) walls = 
    elem (Point (x, y)) walls 
    || x == 0 || x > getLength
    || y == 0 || y > getHeight

getHeight :: Float
getHeight = 4

getLength :: Float
getLength = 4




-- --                      (up,    down,  left,  right)
-- data Graph = Nil | Node (Graph, Graph, Graph, Graph) Int Int
--     deriving (Eq, Show)

-- take in (1) the x size, (2) y size, return a list of iterative coordinates
-- getCoords :: Int -> Int -> [(Int, Int)]
-- getCoords l w = [(x, y) | x <- [0..l], y <- [0..w]]

-- getNodes ::  [(Int, Int)] -> [Graph]
-- getNodes = map go
--     where 
--         go (x, y) = Node (Nil, Nil, Nil, Nil) x y

-- connectNodes :: [Graph] -> [Graph]
-- connectNodes nodes = connectRows nodes
--     -- where 
--         -- r =  
--         -- l = connectLeft r
--         -- u = connectUp l
--         -- finished = connectDown u

-- connectRows :: [Graph] -> [Graph]
-- -- connectRight ((Node (u1, d1, l1, r1) x1 y1) : (Node (u2, d2, l2, r2) x2 y2) : nodes) 
-- --     | 

-- connectRows (n:nodes) = connL (connR sameRows)
--     where 
--         sameRows = allNodesInRow (getRow n) (n:nodes)
--         -- ascending = sortAscending sameRows

-- connR :: [Graph] -> [Graph]
-- connR [n] = [n]
-- connR ((Node (u1, d1, l1, r1) x1 y1):(Node (u2, d2, l2, r2) x2 y2):nodes) =
--     (Node (u1, d1, l1, (Node (u2, d2, l2, r2) x2 y2)) x1 y1) : connR (((Node (u2, d2, l2, r2) x2 y2)): nodes)

-- connL :: [Graph] -> [Graph]
-- connL [n] = [n]
-- connL ((Node (u1, d1, l1, r1) x1 y1):(Node (u2, d2, l2, r2) x2 y2):nodes) =
--     (Node (u1, d1, l1, r2) x1 y1) 
--     : (Node (u2, d2, (Node (u1, d1, l1, r2) x1 y1) , r2) x2 y2)
--     : connR ((Node (u2, d2, (Node (u1, d1, l1, r2) x1 y1) , r2) x2 y2): nodes)

-- connectLeft :: [Graph] -> [Graph]
-- connectLeft = undefined

-- connectUp :: [Graph] -> [Graph]
-- connectUp = undefined

-- connectDown :: [Graph] -> [Graph]
-- connectDown = undefined

-- allNodesInRow :: Int -> [Graph] -> [Graph]
-- allNodesInRow row nodes = filter pred nodes
--     where 
--         pred (Node (_) x y) = y == row

-- allNodesInCol :: Int -> [Graph] -> [Graph]
-- allNodesInCol col nodes = filter pred nodes
--     where 
--         pred (Node (_) x y) = x == col

-- getRow :: Graph -> Int
-- getRow (Node (_) r _) = r

-- getCol :: Graph -> Int
-- getCol (Node (_) _ c) = c
-- -- genPath

